@Library('myLibrary') _

pipeline{

    agent any
 
     tools {
         
         maven 'maven'
        }
     parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '074469624262')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'ap-northeast-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'shankar')
         
     }
    
    
    stages{
         
        stage('Git Checkout'){
            when { expression {  params.action == 'create' } }
             steps{
            gitCheckout(
                branch: "master",
                url: "git@github.com:Shankargoud1/springboot-app.git"
            ) 
            }
        }
           
      
    stage('Unit Test maven'){

        when { expression {  params.action == 'create' } }
         
            steps{
               script{
                   
                   mvnTest()
               }
            }
        }
      
    stage('Integration Test maven'){
          
          when { expression {  params.action == 'create' } }
             steps{
               script{
                   
                   mvnIntegrationTest()
               }
            }
        }
       

    // stage('Static code analysis: Sonarqube'){
    //      when { expression {  params.action == 'create' } }
    //         steps{
    //            script{
                   
    //                def  SonarQubecredentialsId = 'sonar-api'
    //                statiCodeAnalysis(SonarQubecredentialsId)
    //            }
    //         }
    //     }
     
    // stage('Quality Gate Status Check : Sonarqube'){
    //      when { expression {  params.action == 'create' } }
    //         steps{
    //            script{
                   
    //                def  SonarQubecredentialsId = 'sonar-api'
    //                QualityGateStatus(SonarQubecredentialsId)
    //            }
    //         }
    //     }

    stage(' maven Build'){
         
         when { expression {  params.action == 'create' } }
       
           steps{
               script{
                   
                   mvnBuild()
               }
            }
        }
    
    stage('Docker Image Build : ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
    
    stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Push : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }   
        stage('Docker Image Cleanup : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }  
        stage('K8S Deploy') {
        steps{   
             
                 withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'eks', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
    
                  
                sh "kubectl apply -f  eks-deploy-k8s.yaml"
                }
            
        }
       }
    }
}
    
    

